-- INSERE CARROS
INSERT INTO CARROS (ID_CARRO, NOME_CARRO, MARCA, ANO, PRECO_CARRO) VALUES
    (1, 'CIVIC', 'HONDA', '2017', 82150);
INSERT INTO CARROS (ID_CARRO, NOME_CARRO, MARCA, ANO, PRECO_CARRO) VALUES
    (2, 'COROLLA CROSS', 'TOYOTA', '2023', 159890);
INSERT INTO CARROS (ID_CARRO, NOME_CARRO, MARCA, ANO, PRECO_CARRO) VALUES
    (3,'CRETA', 'HYUNDAI', '2023', 124690);
INSERT INTO CARROS (ID_CARRO, NOME_CARRO, MARCA, ANO, PRECO_CARRO) VALUES
    (4, 'COROLLA','TOYOTA', '2023', 178990);
INSERT INTO CARROS (ID_CARRO, NOME_CARRO, MARCA, ANO, PRECO_CARRO) VALUES
    (5, 'ARGO','FIAT', '2023', 89990);
INSERT INTO CARROS (ID_CARRO, NOME_CARRO, MARCA, ANO, PRECO_CARRO) VALUES
    (6, 'T-CROSS','VOLKSWAGEN', '2023', 166210);
INSERT INTO CARROS (ID_CARRO, NOME_CARRO, MARCA, ANO, PRECO_CARRO) VALUES
    (7, 'NIVUS','VOLKSWAGEN', '2023', 143890);
INSERT INTO CARROS (ID_CARRO, NOME_CARRO, MARCA, ANO, PRECO_CARRO) VALUES
    (8, 'JETTA','VOLKSWAGEN', '2023', 221380);

-- INSERE CLIENTES
INSERT INTO CLIENTES (ID_CLIENTE, NOME_CLIENTE, TELEFONE_CLIENTE, EMAIL_CLIENTE) VALUES
    (1, 'Gustavo de Andrade', '(11)9 9967-5142', 'andrade.gu@gmail.com');
INSERT INTO CLIENTES (ID_CLIENTE, NOME_CLIENTE, TELEFONE_CLIENTE, EMAIL_CLIENTE) VALUES
    (2, 'Julia de Castilho', '(41)9 8857-1034', 'juh.castilho@gmail.com');
INSERT INTO CLIENTES (ID_CLIENTE, NOME_CLIENTE, TELEFONE_CLIENTE, EMAIL_CLIENTE) VALUES
    (3, 'Pedro Afonso', '(44)9 9932-2163', 'pedro.afonso@gmail.com');
INSERT INTO CLIENTES (ID_CLIENTE, NOME_CLIENTE, TELEFONE_CLIENTE, EMAIL_CLIENTE) VALUES
    (4, 'Joao Vitor', '(44)9 9955-4120', 'jao.vitor@gmail.com');
INSERT INTO CLIENTES (ID_CLIENTE, NOME_CLIENTE, TELEFONE_CLIENTE, EMAIL_CLIENTE) VALUES
    (5, 'Bianca Holanda', '(11)9 9967-5142', 'bianca.holanda@gmail.com');
INSERT INTO CLIENTES (ID_CLIENTE, NOME_CLIENTE, TELEFONE_CLIENTE, EMAIL_CLIENTE) VALUES
    (6, 'Theodoro Martins', '(44)9 8876-5143', 'theo.martins@gmail.com');
INSERT INTO CLIENTES (ID_CLIENTE, NOME_CLIENTE, TELEFONE_CLIENTE, EMAIL_CLIENTE) VALUES
    (7, 'Julia Piazotto', '(44)9 9786-2561', 'julia.piazotto@gmail.com');
INSERT INTO CLIENTES (ID_CLIENTE, NOME_CLIENTE, TELEFONE_CLIENTE, EMAIL_CLIENTE) VALUES
    (8, 'Maria Eduarda Cerrado', '(44)9 9533-2780', 'duda.cerrado@gmail.com');
INSERT INTO CLIENTES (ID_CLIENTE, NOME_CLIENTE, TELEFONE_CLIENTE, EMAIL_CLIENTE) VALUES
    (9, 'Pedro Drummond', '(41)9 9721-3235', 'pedro.dummond@gmail.com');
INSERT INTO CLIENTES (ID_CLIENTE, NOME_CLIENTE, TELEFONE_CLIENTE, EMAIL_CLIENTE) VALUES
    (10, 'Luis Carlos', '(41)9 9991-7833', 'luis.carlos@gmail.com');
INSERT INTO CLIENTES (ID_CLIENTE, NOME_CLIENTE, TELEFONE_CLIENTE, EMAIL_CLIENTE) VALUES
    (11, 'Gabriela Cavalcante', '(44)9 9722-1859', 'gabi.cavalcante@gmail.com');
INSERT INTO CLIENTES (ID_CLIENTE, NOME_CLIENTE, TELEFONE_CLIENTE, EMAIL_CLIENTE) VALUES
    (12, 'Nicolas Medeiros', '(41)9 8859-2765', 'nicolas.medeiros@gmail.com');

-- QUANDO FALTA UM DADO (UTILIZA-SE O [NULL])
INSERT INTO CLIENTES (ID_CLIENTE, NOME_CLIENTE, TELEFONE_CLIENTE, EMAIL_CLIENTE) VALUES
    (13, 'Guilherme Pedroso', NULL, 'guilherme.pedroso@gmail.com');
INSERT INTO CLIENTES (ID_CLIENTE, NOME_CLIENTE, TELEFONE_CLIENTE, EMAIL_CLIENTE) VALUES
    (14, 'Giovanna Maria', '(44)9 9887-2347', NULL);

INSERT INTO CLIENTES (ID_CLIENTE, NOME_CLIENTE, TELEFONE_CLIENTE, EMAIL_CLIENTE) VALUES
    (15, 'Ruan Paulo', '(44)9 8753-2891', 'ruan.paulo@gmail.com');

-- CRIOU TABELA PEDIDOS
CREATE TABLE PEDIDOS(
    ID_PEDIDO INT,
    ID_CLIENTE INT,
    DATA_PEDIDO DATE,
    ID_CARRO INT,
    UN_VENDIDAS INT,
    PRECO_CARRO INT,
    CUSTO_VENDA INT,
    RECEITA_TOTAL INT
);

-- INSERE PEDIDOS (COMPRAS)
INSERT INTO PEDIDOS (ID_PEDIDO, ID_CLIENTE, DATA_PEDIDO, ID_CARRO, UN_VENDIDAS, PRECO_CARRO, CUSTO_VENDA, RECEITA_TOTAL) VALUES
    (1, 1, '01/01/2023', 5, 1, 89990, 75225, 89990);
INSERT INTO PEDIDOS (ID_PEDIDO, ID_CLIENTE, DATA_PEDIDO, ID_CARRO, UN_VENDIDAS, PRECO_CARRO, CUSTO_VENDA, RECEITA_TOTAL) VALUES
    (2, 2, '05/01/2023', 6, 1, 166210, 152410, 166210);
INSERT INTO PEDIDOS (ID_PEDIDO, ID_CLIENTE, DATA_PEDIDO, ID_CARRO, UN_VENDIDAS, PRECO_CARRO, CUSTO_VENDA, RECEITA_TOTAL) VALUES
    (3, 3, '07/01/2023', 6, 1, 166210, 152410, 166210);
INSERT INTO PEDIDOS (ID_PEDIDO, ID_CLIENTE, DATA_PEDIDO, ID_CARRO, UN_VENDIDAS, PRECO_CARRO, CUSTO_VENDA, RECEITA_TOTAL) VALUES
    (4, 4, '08/01/2023', 7, 1, 143890, 125320, 143890);
INSERT INTO PEDIDOS (ID_PEDIDO, ID_CLIENTE, DATA_PEDIDO, ID_CARRO, UN_VENDIDAS, PRECO_CARRO, CUSTO_VENDA, RECEITA_TOTAL) VALUES
    (5, 5, '10/01/2023', 3, 1, 124690, 99240, 124690);
INSERT INTO PEDIDOS (ID_PEDIDO, ID_CLIENTE, DATA_PEDIDO, ID_CARRO, UN_VENDIDAS, PRECO_CARRO, CUSTO_VENDA, RECEITA_TOTAL) VALUES
    (6, 6, '10/01/2023', 3, 1, 124690, 99240, 124690);

-- EXEMPLOS DE SELECT
-- (*) = TODAS AS COLUNAS

SELECT * FROM CLIENTES;

SELECT * FROM CARROS
WHERE PRECO_CARRO > 130000;
    
SELECT ID_CARRO, NOME_CARRO
FROM CARROS;

SELECT 
    ID_CARRO AS "COD",
    NOME_CARRO AS "NOME"
FROM CARROS;


SELECT * FROM CARROS
ORDER BY ID_CARRO;

SELECT * FROM CARROS
ORDER BY ID_CARRO DESC;

SELECT NOME_CARRO, ANO
FROM CARROS
WHERE ANO > 2020
ORDER BY NOME_CARRO
FETCH FIRST 10 ROWS ONLY;

-- =, <, >, <=, >=, <>. (OPERADORES LOGICOS)

SELECT * FROM CARROS
WHERE PRECO_CARRO >= 150000;

-- ATRIBUIR UM 'NOME' AO WHERE (TEXTO)
SELECT * FROM CARROS
WHERE MARCA = 'HONDA';

-- DATAS + OPERADORES LOGICOS
SELECT * FROM CARROS;
-- WHERE DATA VENDA = '02/05/2023';
-- DATA = (DD-MM-YEAR) - [NO ORACLE] 

-- OPERADOR AND (+ DE UM FILTRO)
SELECT * FROM CARROS
WHERE MARCA = 'HONDA' AND ANO = '2017';

-- OPERADOR OR (UM OU OUTRO)
SELECT * FROM CARROS
WHERE MARCA= 'HYUNDAI' OR ANO = '2023';

-- FUNCOES DE AGREGACAO
-- COUNT
SELECT
    COUNT(NOME_CLIENTE)
FROM CLIENTES;

-- COUNT(*)
SELECT
    COUNT(*)
FROM CLIENTES;

-- COUNT(DISTINCT)
SELECT
    COUNT(DISTINCT MARCA) AS "MARCAS DISPONIVEIS"
FROM CARROS;

-- SUM - (SOMA)
SELECT
    SUM(PRECO_CARRO)
FROM CARROS;

-- AVG - (MEDIA)
SELECT
    AVG(PRECO_CARRO)
FROM CARROS;

-- MIN - (MINIMO)
SELECT
    MIN(PRECO_CARRO)
FROM CARROS;

-- MAX - (MAXIMO)
SELECT
    MAX(PRECO_CARRO)
FROM CARROS;

-- SUM, AVG, MIN E MAX (TUDO JUNTO)
SELECT
     SUM(PRECO_CARRO) AS "SOMA DOS PRECOS",
     AVG(PRECO_CARRO) AS "MEDIA DOS PRECOS",
     MIN(PRECO_CARRO) AS "MENOR PRECO",
     MAX(PRECO_CARRO) AS "MAIOR PRECO"
FROM CARROS;

-- GROUP BY
SELECT
    MARCA,
    COUNT (*) AS "QTD. CARROS"
FROM CARROS
GROUP BY MARCA;

SELECT
    ID_CARRO,
    SUM(UN_VENDIDA) AS "UNIDADES VENDIDAS",
    SUM(PRECO_CARRO) AS "VALOR DE VENDA",
    SUM(CUSTO_VENDA) AS "CUSTO DE VENDA",
    SUM(RECEITA_TOTAL) AS "RECEITA DA VENDA"
FROM PEDIDOS
GROUP BY ID_CARRO;

-- JOIN

-- INNER JOIN - TRAZ EM COMUM O QUE HA ENTRE AS TABELAS ENVOLVIDAS
--  (FROM TABELA1
--   INNER JOIN TABELA2
--      ON TABELA1.NOME_COLUNA = TABELA2.NOME_COLUNA)

-- TABELA 1 --> TABELA FATO --> TABELA PEDIDOS
-- TABELA 2 --> TABELA DIMENSAO --> TABELA CLIENTES

-- CHAVE PRIMARIA - TABELA DIMENSAO (CLIENTES)--> ID_CLIENTES
-- CHAVE ESTRANGEIRA - TABELA FATO (PEDIDOS)--> ID_CLIENTE
SELECT
    PEDIDOS.*,
    CLIENTES.NOME_CLIENTE,
    CLIENTES.TELEFONE_CLIENTE
FROM PEDIDOS
INNER JOIN CLIENTES
    ON PEDIDOS.ID_CLIENTE = CLIENTES.ID_CLIENTE;

SELECT
    PEDIDOS.ID_PEDIDO,
    PEDIDOS.ID_CLIENTE,
    PEDIDOS.ID_CARRO,
    CLIENTES.NOME_CLIENTE,
    CLIENTES.TELEFONE_CLIENTE
FROM PEDIDOS
INNER JOIN CLIENTES
    ON PEDIDOS.ID_CLIENTE = CLIENTES.ID_CLIENTE;

-- TABELA 1 --> TABELA FATO --> TABELA PEDIDOS
-- TABELA 2 --> TABELA DIMENSAO --> TABELA CARROS

-- CHAVE PRIMARIA - TABELA DIMENSAO (CARROS)--> ID_CARRO
-- CHAVE ESTRANGEIRA - TABELA FATO (PEDIDOS)--> ID_CARRO
SELECT
    PEDIDOS.ID_PEDIDO,
    PEDIDOS.ID_CLIENTE,
    PEDIDOS.ID_CARRO,
    CARROS.NOME_CARRO,
    CARROS.MARCA
FROM PEDIDOS
INNER JOIN CARROS
    ON PEDIDOS.ID_CARRO = CARROS.ID_CARRO;

-- TABELA 1 --> TABELA FATO --> TABELA PEDIDOS
-- TABELA 2 --> TABELA DIMENSAO --> TABELA CLIENTES
-- TABELA 3 --> TABELA DIMENSAO --> TABELA CARROS

-- CHAVE ESTRANGEIRA - TABELA FATO [1] (PEDIDOS)--> ID_CARRO
-- CHAVE PRIMARIA - TABELA DIMENSAO [2] (CLIENTES)--> ID_CLIENTE
-- CHAVE PRIMARIA - TABELA DIMENSAO [3] (CARROS)--> ID_CARRO
SELECT
    PEDIDOS.ID_PEDIDO,
    PEDIDOS.ID_CLIENTE,
    CLIENTES.NOME_CLIENTE,
    PEDIDOS.ID_CARRO,
    CARROS.NOME_CARRO,
    CARROS.MARCA
FROM PEDIDOS
INNER JOIN CLIENTES
    ON PEDIDOS.ID_CLIENTE = CLIENTES.ID_CLIENTE
INNER JOIN CARROS
    ON PEDIDOS.ID_CARRO = CARROS.ID_CARRO;

-- SEM USAR O INNER JOIN (NAO CONVENCIONAL)
SELECT
    PEDIDOS.ID_PEDIDO,
    PEDIDOS.ID_CLIENTE,
    PEDIDOS.ID_CARRO,
    CARROS.NOME_CARRO,
    CARROS.MARCA
FROM PEDIDOS,
     CARROS
WHERE
    PEDIDOS.ID_CARRO = CARROS.ID_CARRO;

-- LEFT JOIN - TRAZ OS ITENS DA TABELA DA ESQUERDA INCLUIDO INTERSECAO COM A TABELA DA DIREITA
--  (FROM TABELA1
--   LEFT JOIN TABELA2
--     ON TABELA1.NOME_COLUNA = TABELA2.NOME_COLUNA)

-- TABELA 1 --> TABELA DIMENSAO --> TABELA CLIENTES
-- TABELA 2 --> TABELA FATO --> TABELA PEDIDOS

-- CHAVE ESTRANGEIRA - TABELA FATO (PEDIDOS)--> ID_CLIENTE
-- CHAVE PRIMARIA - TABELA DIMENSAO (CLIENTES)--> ID_CLIENTE
SELECT
    CLIENTES.NOME_CLIENTE,
    PEDIDOS.ID_PEDIDO,
    PEDIDOS.DATA_PEDIDO,
    PEDIDOS.ID_CARRO
FROM CLIENTES
LEFT JOIN PEDIDOS
    ON CLIENTES.ID_CLIENTE = PEDIDOS.ID_CLIENTE;

-- TABELA 1 --> TABELA DIMENSAO --> TABELA CLIENTES
-- TABELA 2 --> TABELA FATO --> TABELA PEDIDOS
-- TABELA 3 --> TABELA DIMENSAO --> TABELA CARROS

-- CHAVE PRIMARIA - TABELA DIMENSAO [1] (CLIENTES)--> ID_CLIENTE
-- CHAVE ESTRANGEIRA - TABELA FATO [2] (PEDIDOS)--> ID_CLIENTE
-- CHAVE PRIMARIA - TABELA DIMENSAO [3] (CARROS)--> ID_CARRO
SELECT
    CLIENTES.NOME_CLIENTE,
    PEDIDOS.ID_PEDIDO,
    PEDIDOS.DATA_PEDIDO,
    PEDIDOS.ID_CARRO,
    CARROS.NOME_CARRO,
    CARROS.MARCA
FROM CLIENTES
LEFT JOIN PEDIDOS
    ON CLIENTES.ID_CLIENTE = PEDIDOS.ID_CLIENTE
LEFT JOIN CARROS
    ON PEDIDOS.ID_CARRO = CARROS.ID_CARRO;

-- RIGHT JOIN - TRAZ OS ITENS DA TABELA DA DIREITA INCLUIDO INTERSECAO COM A TABELA DA ESQUERDA
--  (FROM TABELA1
--   RIGHT JOIN TABELA2
--      ON TABELA1.NOME_COLUNA = TABELA2.NOME_COLUNA)

-- TABELA 1 --> TABELA FATO --> TABELA PEDIDOS
-- TABELA 2 --> TABELA DIMENSAO --> TABELA CARROS

-- CHAVE ESTRANGEIRA - TABELA FATO (PEDIDOS)--> ID_CARRO
-- CHAVE PRIMARIA - TABELA DIMENSAO (CARROS)--> ID_CARRO
SELECT
    CARROS.NOME_CARRO,
    PEDIDOS.ID_CARRO,
    PEDIDOS.DATA_PEDIDO
FROM PEDIDOS
RIGHT JOIN CARROS
    ON PEDIDOS.ID_CARRO = CARROS.ID_CARRO;

-- RIGHT + LEFT - ESSA CONSULTA MOSTRA TODOS OS CARRO(NOME_CARRO) E O CLIENTE(NOME_CLIENTE) QUE COMPROU ALGUM
-- TABELA 1 --> TABELA FATO --> TABELA PEDIDOS
-- TABELA 2 --> TABELA DIMENSAO --> TABELA CARROS
-- TABELA 3 --> TABELA DIMENSAO --> TABELA CLIENTES

-- CHAVE ESTRANGEIRA - TABELA FATO [1] (PEDIDOS)--> ID_CARRO
-- CHAVE PRIMARIA - TABELA DIMENSAO [2] (CARROS)--> ID_CARRO
-- CHAVE PRIMARIA - TABELA DIMENSAO [3] (CLIENTES)--> ID_CLIENTE
SELECT
    CARROS.NOME_CARRO,
    PEDIDOS.ID_CARRO,
    PEDIDOS.DATA_PEDIDO,
    CLIENTES.NOME_CLIENTE
FROM PEDIDOS
RIGHT JOIN CARROS
    ON PEDIDOS.ID_CARRO = CARROS.ID_CARRO
LEFT JOIN CLIENTES
    ON PEDIDOS.ID_CLIENTE = CLIENTES.ID_CLIENTE;

-- RIGHTx2 - ESSA CONSULTA MOSTRA TODOS OS CLIENTES(NOME_CLIENTE) E SE COMPROU ALGUM CARRO(NOME_CARRO)
-- TABELA 1 --> TABELA FATO --> TABELA PEDIDOS
-- TABELA 2 --> TABELA DIMENSAO --> TABELA CARROS
-- TABELA 3 --> TABELA DIMENSAO --> TABELA CLIENTES

-- CHAVE ESTRANGEIRA - TABELA FATO [1] (PEDIDOS)--> ID_CARRO
-- CHAVE PRIMARIA - TABELA DIMENSAO [2] (CARROS)--> ID_CARRO
-- CHAVE PRIMARIA - TABELA DIMENSAO [3] (CLIENTES)--> ID_CLIENTE
SELECT
    CARROS.NOME_CARRO,
    PEDIDOS.ID_CARRO,
    PEDIDOS.DATA_PEDIDO,
    CLIENTES.NOME_CLIENTE
FROM PEDIDOS
RIGHT JOIN CARROS
    ON PEDIDOS.ID_CARRO = CARROS.ID_CARRO
RIGHT JOIN CLIENTES
    ON PEDIDOS.ID_CLIENTE = CLIENTES.ID_CLIENTE;

-- FULL JOIN - TRAZ TODOS INTENS DAS TABELAS ENVOLVIDAS
--  (FROM TABELA1
--   FULL OUTER JOIN JOIN TABELA2
--      ON TABELA1.NOME_COLUNA = TABELA2.NOME_COLUNA)

-- TABELA 1 --> TABELA FATO --> TABELA PEDIDOS
-- TABELA 2 --> TABELA DIMENSAO --> TABELA CARROS

-- CHAVE ESTRANGEIRA - TABELA FATO (CLIENTES)--> ID_CLIENTE
-- CHAVE PRIMARIA - TABELA DIMENSAO (PEDIDOS)--> ID_CLIENTE
SELECT
    CLIENTES.*,
    PEDIDOS.*
FROM CLIENTES
FULL OUTER JOIN PEDIDOS 
    ON CLIENTES.ID_CLIENTE = PEDIDOS.ID_CLIENTE;

-- EXEMPLO + ORDER BY

SELECT
    CLIENTES.*,
    PEDIDOS.*
FROM CLIENTES
FULL OUTER JOIN PEDIDOS 
    ON CLIENTES.ID_CLIENTE = PEDIDOS.ID_CLIENTE
ORDER BY CLIENTES.ID_CLIENTE;

-- CROSS JOIN - TODOS OS ITENS DE UMA TABELA ESTARAO ASSOCIADOS A CADA ITEM DA OUTRA.
--  (FROM TABELA1
--   CROSS JOIN JOIN TABELA2
--      WHERE TABELA1.ID = 1 OR TABELA2.ID = 1)

-- NESSA CONSULTA SE RETORNA A CADA CARRO O NUMERO DE PEDIDOS, MESMO QUE O PEDIDO NAO SEJA DO CARRO RETORNADO 
SELECT
    CARROS.ID_CARRO,
    CARROS.NOME_CARRO,
    PEDIDOS.ID_PEDIDO,
    PEDIDOS.DATA_PEDIDO
FROM CARROS
CROSS JOIN PEDIDOS
ORDER BY ID_CARRO;

-- NESSA CONSULTA, COM ADICAO DO 'WHERE', RETORNA APENAS OS CARROS VENDIDOS EM RELACAO AO PEDIDO (ID_PEDIDO)

SELECT
    CLIENTES.ID_CLIENTE,
    CLIENTES.NOME_CLIENTE,
    PEDIDOS.ID_PEDIDO,
    PEDIDOS.DATA_PEDIDO
FROM CLIENTES
CROSS JOIN PEDIDOS
WHERE CLIENTES.ID_CLIENTE = PEDIDOS.ID_PEDIDO
ORDER BY ID_CLIENTE;

-- {EXTRA} NATURAL JOIN - NESSA CONSULTA SE RETORNA OS ITENS DE AMBAS TABELAS, EXCLUINDO ITENS REPETIDOS
SELECT * 
FROM CLIENTES NATURAL JOIN PEDIDOS
ORDER BY ID_CLIENTE;

SELECT *
FROM CARROS NATURAL JOIN PEDIDOS
ORDER BY ID_CARRO;

-- NATURAL JOIN E UMA OPCAO DE CONSULTA POREM SEMPRE DAR PREFERENCIA AO INNER JOIN

-- DELETE - DELETA LINHAS DE UMA TABELA
DELETE FROM PEDIDOS
WHERE ID_PEDIDO = 6;

-- DROP - DELETA TABELAS DE UM BANCO DE DADOS
DROP TABLE PEDIDOS;

-- VIEW - O VIEW E UMA TABELA VIRTUAL CRIADA A PARTIR DE UMA CONSULTA A UMA OU MAIS TABELAS
CREATE VIEW VW_MARCA AS
SELECT * FROM CARROS
WHERE MARCA = 'VOLKSWAGEN';

-- REPLACE VIEW
CREATE OR REPLACE VIEW VW_MARCA AS
SELECT * FROM CARROS
WHERE MARCA = 'TOYOTA'

-- DELETE VIEW
DROP VIEW VW_MARCA;

-- TRIGGER - DISPARA UMA ACAO AO IDENTIFICAR UM EVENTO OCORRIDO NO SISTEMA DO BANCO DE DADOS

-- SELECT SYSDATE FROM DUAL;
-- SELECT TO_CHAR(SYSDATE, 'DAY') FROM DUAL;
-- SELECT TRIM(TO_CHAR(SYSDATE, 'DAY')) FROM DUAL; 

CREATE OR REPLACE TRIGGER TG_CARROS_BEFORE_INSERT_UPDATE_DELETE
BEFORE INSERT OR UPDATE OR DELETE
ON CARROS
BEGIN
    IF TRIM(TO_CHAR(SYSDATE, 'DAY')) IN ('SÁBADO', 'DOMINGO') THEN
        RAISE_APPLICATION_ERROR(-20001, 'Não é possível fazer alterações durante final de semana');
    END IF;
END;

-- DELETE FROM CARROS
-- WHERE ID_CARRO = 8;
-- CASO ESSE DELETE SEJA USADO NO SABADO OU DOMINGO, OS DADOS CORRESPONDENTES NAO SERAO EXCLUIDOS DA TABELA

-- SUBQUERY - PERMITE CRIAR UMA QUERY DENTRO DE OUTRA QUERY, TORNANDO UMA QUERY MAIS OTIMIZADA

-- SUBQUERY + WHERE
SELECT * FROM CARROS
WHERE PRECO_CARRO > (SELECT AVG(PRECO_CARRO) FROM CARROS);

-- SUBQUERY + SELECT
SELECT ID_PEDIDO, DATA_PEDIDO, (SELECT NOME_CARRO FROM CARROS WHERE PEDIDOS.ID_CARRO = CARROS.ID_CARRO)AS "CARRO"
FROM PEDIDOS;

-- SUBQUERY + FROM
SELECT *
FROM (SELECT NOME_CARRO, MARCA FROM CARROS WHERE ANO <= 2020);
